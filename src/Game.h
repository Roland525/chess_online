#ifndef GAME_H                    // Если макрос GAME_H не определён (защита от повторного включения)
#define GAME_H                    // Определяем макрос GAME_H

#include "Board.h"                // Подключаем заголовочный файл класса Board, который отвечает за игровое поле
#include "NetworkManager.h"       // Подключаем заголовочный файл класса NetworkManager для сетевой логики игры
#include <SDL2/SDL.h>             // Подключаем библиотеку SDL для работы с графикой, окнами и событиями
#include <string>                 // Подключаем стандартную библиотеку для работы со строками

// Объявление класса Game, который инкапсулирует основную логику игры
class Game {
public:
    Game();                       // Конструктор класса Game, выполняет базовую инициализацию
    ~Game();                      // Деструктор класса Game, отвечает за освобождение ресурсов

    bool init();                  // Метод инициализации игры (создание окна, загрузка текстур и т.д.)
    void run();                   // Метод запуска игрового цикла
    void close();                 // Метод для корректного завершения игры и освобождения ресурсов

private:
    SDL_Window* window;           // Указатель на окно SDL, где будет отображаться игра
    SDL_Renderer* renderer;       // Указатель на рендерер SDL, который отвечает за отрисовку графики
    
    // Текстуры (графические ресурсы)
    SDL_Texture* boardTexture;    // Текстура игрового поля
    SDL_Texture* whitePieceTexture; // Текстура белой шашки
    SDL_Texture* blackPieceTexture; // Текстура черной шашки
    SDL_Texture* selectedW;       // Текстура белой шашки в выделенном состоянии
    SDL_Texture* selectedB;       // Текстура черной шашки в выделенном состоянии
    SDL_Texture* blackKing;       // Текстура черной дамки
    SDL_Texture* blackKingS;      // Текстура черной дамки в выделенном состоянии
    SDL_Texture* whiteKing;       // Текстура белой дамки
    SDL_Texture* whiteKingS;      // Текстура белой дамки в выделенном состоянии
    
    Board* board;                 // Указатель на объект класса Board, который управляет игровым полем
    NetworkManager* networkManager; // Указатель на объект класса NetworkManager для работы с сетью
    
    // Состояние игры
    int currentTurn;              // Переменная, хранящая текущий ход (например, белые или черные)
    int localPlayer;              // Переменная, определяющая, за какую сторону играет локальный игрок
    bool networkMode;             // Флаг, указывающий, запущена ли игра в сетевом режиме
    
    // Выделенная шашка
    bool selected;                // Флаг, указывающий, выбрана ли шашка пользователем
    int selectedX, selectedY;     // Координаты выбранной шашки
    
    // Приватные методы для внутренней логики
    SDL_Texture* loadTexture(const char* path); // Метод для загрузки текстуры из файла по указанному пути
    void handleMouseClick(int x, int y);          // Метод для обработки кликов мыши (обработка выбора и перемещения шашки)
    void applyNetworkMove(int fromX, int fromY, int toX, int toY, uint8_t continuation); // Метод для применения хода, полученного по сети
};

#endif // GAME_H                  // Конец защиты от повторного включения заголовочного файла GAME_H
