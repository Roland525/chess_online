#ifndef NETWORKMANAGER_H            // Если макрос NETWORKMANAGER_H ещё не определён, продолжаем обработку файла
#define NETWORKMANAGER_H            // Определяем макрос NETWORKMANAGER_H для защиты от повторного включения

#include <SDL2/SDL_net.h>          // Подключаем SDL_net для работы с сетевыми функциями
#include <cstdint>                 // Подключаем заголовочный файл для фиксированных целочисленных типов (например, uint8_t)
#include <string>                  // Подключаем библиотеку для работы со строками (std::string)

// Объявление класса NetworkManager, отвечающего за сетевое взаимодействие (инициализация сервера/клиента, отправка и получение данных)
class NetworkManager {
public:
    NetworkManager();             // Конструктор класса, инициализирует объект NetworkManager
    ~NetworkManager();            // Деструктор класса, освобождает ресурсы, связанные с сетевым соединением

    bool initServer();            // Метод для инициализации сервера; возвращает true, если сервер успешно инициализирован
    bool initClient(const std::string& serverIP); // Метод для инициализации клиента с указанным IP сервера; возвращает true при успешном подключении

    // Метод для отправки данных хода по сети:
    // fromX, fromY - начальные координаты, toX, toY - конечные координаты, continuation - флаг продолжения хода (например, для множественного захвата)
    void sendMove(int fromX, int fromY, int toX, int toY, uint8_t continuation);
    
    // Метод для получения данных хода по сети; параметры передаются по ссылке,
    // и возвращается true, если данные успешно получены
    bool receiveMove(int& fromX, int& fromY, int& toX, int& toY, uint8_t& continuation);
    
    void close();                 // Метод для закрытия сетевого соединения и освобождения выделенных ресурсов

    // Геттер для проверки, включен ли сетевой режим (возвращает true, если сетевой режим активен)
    bool isNetworkMode() const { return networkMode; }

private:
    bool networkMode;             // Флаг, указывающий, запущен ли сетевой режим (true, если да)
    bool isServer;                // Флаг, указывающий, является ли этот экземпляр сервером (true) или клиентом (false)
    TCPsocket tcpSocket;          // TCP-сокет, используемый для соединения (как для сервера, так и для клиента)
    TCPsocket serverSocket;       // Серверный TCP-сокет (используется только если экземпляр является сервером)
    SDLNet_SocketSet socketSet;   // Набор сокетов для отслеживания активности на TCP-сокете с помощью SDL_net
};

#endif // NETWORKMANAGER_H      // Конец блока защиты от повторного включения файла (если NETWORKMANAGER_H уже определён, содержимое файла не включается повторно)
